// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"Webook/webook/internal/repository"
	article2 "Webook/webook/internal/repository/article"
	"Webook/webook/internal/repository/cache"
	"Webook/webook/internal/repository/dao"
	"Webook/webook/internal/repository/dao/article"
	"Webook/webook/internal/service"
	"Webook/webook/internal/web"
	"Webook/webook/internal/web/jwt"
	"Webook/webook/ioc"
	"github.com/google/wire"
)

import (
	_ "github.com/spf13/viper/remote"
)

// Injectors from wire.go:

func InitWebServer() *App {
	cmdable := ioc.InitRedis()
	handler := jwt.NewRedisJWTHandler(cmdable)
	logger := ioc.InitLogger()
	v := ioc.InitGinMiddleware(cmdable, handler, logger)
	db := ioc.InitDB(logger)
	userDAO := dao.NewUserDAO(db)
	userCache := cache.NewUserCache(cmdable)
	userRepository := repository.NewUserRepository(userDAO, userCache)
	userService := service.NewUserService(userRepository, logger)
	codeCache := cache.NewCodeCache(cmdable)
	codeRepository := repository.NewCodeRepository(codeCache)
	smsService := ioc.InitSMSService()
	codeService := service.NewCodeService(codeRepository, smsService)
	userHandler := web.NewUserHandler(userService, codeService, handler)
	wechatService := ioc.InitWechatService(logger)
	oAuth2WechatHandler := web.NewOAuth2WechatHandler(wechatService, userService, handler)
	articleDAO := article.NewArticleDAO(db)
	articleCache := cache.NewRedisArticleCache(cmdable)
	articleRepository := article2.NewArticleRepository(articleDAO, articleCache, userRepository, logger)
	articleService := service.NewArticleService(articleRepository)
	articleHandler := web.NewArticleHandler(articleService, logger)
	interactiveDAO := dao.NewInteractiveDAO(db)
	interactiveCache := cache.NewInteractiveCache(cmdable)
	interactiveRepository := repository.NewInteractiveRepository(interactiveDAO, interactiveCache)
	interactiveService := service.NewInteractiveService(interactiveRepository)
	articleReaderHandler := web.NewArticleReaderHandler(articleService, interactiveService, logger)
	engine := ioc.InitWebServer(v, userHandler, oAuth2WechatHandler, articleHandler, articleReaderHandler)
	rankingService := service.NewRankingService(articleService, interactiveService)
	rankingJob := ioc.InitRankingJob(rankingService)
	cron := ioc.InitJobs(logger, rankingJob)
	app := &App{
		server: engine,
		cron:   cron,
	}
	return app
}

// wire.go:

var rankingSvcSet = wire.NewSet(cache.NewRankingCache, repository.NewRankingRepository, service.NewRankingService)
