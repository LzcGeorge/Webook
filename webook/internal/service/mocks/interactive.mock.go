// Code generated by MockGen. DO NOT EDIT.
// Source: ./interactive.go
//
// Generated by this command:
//
//	mockgen -source=./interactive.go -package=svcmocks -destination=./mocks/interactive.mock.go
//

// Package svcmocks is a generated GoMock package.
package svcmocks

import (
	domain "Webook/webook/internal/domain"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInteractiveService is a mock of InteractiveService interface.
type MockInteractiveService struct {
	ctrl     *gomock.Controller
	recorder *MockInteractiveServiceMockRecorder
	isgomock struct{}
}

// MockInteractiveServiceMockRecorder is the mock recorder for MockInteractiveService.
type MockInteractiveServiceMockRecorder struct {
	mock *MockInteractiveService
}

// NewMockInteractiveService creates a new mock instance.
func NewMockInteractiveService(ctrl *gomock.Controller) *MockInteractiveService {
	mock := &MockInteractiveService{ctrl: ctrl}
	mock.recorder = &MockInteractiveServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInteractiveService) EXPECT() *MockInteractiveServiceMockRecorder {
	return m.recorder
}

// Collect mocks base method.
func (m *MockInteractiveService) Collect(ctx context.Context, biz string, bizId, collectionId, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collect", ctx, biz, bizId, collectionId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Collect indicates an expected call of Collect.
func (mr *MockInteractiveServiceMockRecorder) Collect(ctx, biz, bizId, collectionId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockInteractiveService)(nil).Collect), ctx, biz, bizId, collectionId, userId)
}

// DecreaseLike mocks base method.
func (m *MockInteractiveService) DecreaseLike(ctx context.Context, biz string, bizId, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecreaseLike", ctx, biz, bizId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecreaseLike indicates an expected call of DecreaseLike.
func (mr *MockInteractiveServiceMockRecorder) DecreaseLike(ctx, biz, bizId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecreaseLike", reflect.TypeOf((*MockInteractiveService)(nil).DecreaseLike), ctx, biz, bizId, userId)
}

// Get mocks base method.
func (m *MockInteractiveService) Get(ctx context.Context, biz string, bizId, userId int64) (domain.Interactive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, biz, bizId, userId)
	ret0, _ := ret[0].(domain.Interactive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInteractiveServiceMockRecorder) Get(ctx, biz, bizId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInteractiveService)(nil).Get), ctx, biz, bizId, userId)
}

// GetInterMapByBizIds mocks base method.
func (m *MockInteractiveService) GetInterMapByBizIds(ctx context.Context, biz string, bizIds []int64) (map[int64]domain.Interactive, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterMapByBizIds", ctx, biz, bizIds)
	ret0, _ := ret[0].(map[int64]domain.Interactive)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInterMapByBizIds indicates an expected call of GetInterMapByBizIds.
func (mr *MockInteractiveServiceMockRecorder) GetInterMapByBizIds(ctx, biz, bizIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterMapByBizIds", reflect.TypeOf((*MockInteractiveService)(nil).GetInterMapByBizIds), ctx, biz, bizIds)
}

// IncreaseLike mocks base method.
func (m *MockInteractiveService) IncreaseLike(ctx context.Context, biz string, bizId, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseLike", ctx, biz, bizId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseLike indicates an expected call of IncreaseLike.
func (mr *MockInteractiveServiceMockRecorder) IncreaseLike(ctx, biz, bizId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseLike", reflect.TypeOf((*MockInteractiveService)(nil).IncreaseLike), ctx, biz, bizId, userId)
}

// IncreaseReadCnt mocks base method.
func (m *MockInteractiveService) IncreaseReadCnt(ctx context.Context, biz string, bizId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseReadCnt", ctx, biz, bizId)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseReadCnt indicates an expected call of IncreaseReadCnt.
func (mr *MockInteractiveServiceMockRecorder) IncreaseReadCnt(ctx, biz, bizId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseReadCnt", reflect.TypeOf((*MockInteractiveService)(nil).IncreaseReadCnt), ctx, biz, bizId)
}
